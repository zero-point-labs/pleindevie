# Task ID: 9
# Title: Implement Urgency/Scarcity Section
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Create a section with time-sensitive offers, countdown timers, and limited availability messaging to increase immediate action and reduce decision paralysis.
# Details:
1. Create GlowCard component with pulsing effects
2. Implement CountdownTimer component
3. Add wave background animations
4. Create responsive layout for all viewport sizes
5. Add urgency messaging and limited availability indicators
6. Implement call-to-action buttons
7. Add visual elements to enhance appeal

Example implementation:
```tsx
import { motion } from 'framer-motion';
import { useState, useEffect } from 'react';

interface CountdownTimerProps {
  targetDate: Date;
}

const CountdownTimer = ({ targetDate }: CountdownTimerProps) => {
  const calculateTimeLeft = () => {
    const difference = +targetDate - +new Date();
    let timeLeft = {};

    if (difference > 0) {
      timeLeft = {
        days: Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
        minutes: Math.floor((difference / 1000 / 60) % 60),
        seconds: Math.floor((difference / 1000) % 60),
      };
    }

    return timeLeft;
  };

  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

  useEffect(() => {
    const timer = setTimeout(() => {
      setTimeLeft(calculateTimeLeft());
    }, 1000);

    return () => clearTimeout(timer);
  });

  const timeSegments = [
    { label: 'Days', value: timeLeft['days'] || 0 },
    { label: 'Hours', value: timeLeft['hours'] || 0 },
    { label: 'Minutes', value: timeLeft['minutes'] || 0 },
    { label: 'Seconds', value: timeLeft['seconds'] || 0 },
  ];

  return (
    <div className="flex justify-center space-x-4">
      {timeSegments.map((segment, index) => (
        <div key={index} className="text-center">
          <div className="w-16 h-16 bg-slate-800 rounded-lg flex items-center justify-center mb-1">
            <motion.span 
              key={segment.value}
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              transition={{ duration: 0.2 }}
              className="text-2xl font-bold text-white"
            >
              {segment.value < 10 ? `0${segment.value}` : segment.value}
            </motion.span>
          </div>
          <div className="text-xs text-slate-400">{segment.label}</div>
        </div>
      ))}
    </div>
  );
};

const UrgencySection = () => {
  // Set target date to 7 days from now
  const targetDate = new Date();
  targetDate.setDate(targetDate.getDate() + 7);
  
  return (
    <div className="relative py-16 overflow-hidden">
      {/* Wave background animation */}
      <div className="absolute inset-0 -z-10">
        <svg className="absolute bottom-0 left-0 w-full" viewBox="0 0 1440 320" xmlns="http://www.w3.org/2000/svg">
          <path 
            fill="rgba(212, 175, 55, 0.1)" 
            d="M0,192L48,176C96,160,192,128,288,128C384,128,480,160,576,186.7C672,213,768,235,864,224C960,213,1056,171,1152,149.3C1248,128,1344,128,1392,128L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"
          >
            <animate 
              attributeName="d" 
              dur="10s" 
              repeatCount="indefinite" 
              values="M0,192L48,176C96,160,192,128,288,128C384,128,480,160,576,186.7C672,213,768,235,864,224C960,213,1056,171,1152,149.3C1248,128,1344,128,1392,128L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z;
                     M0,160L48,170.7C96,181,192,203,288,202.7C384,203,480,181,576,165.3C672,149,768,139,864,154.7C960,171,1056,213,1152,218.7C1248,224,1344,192,1392,176L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z;
                     M0,192L48,176C96,160,192,128,288,128C384,128,480,160,576,186.7C672,213,768,235,864,224C960,213,1056,171,1152,149.3C1248,128,1344,128,1392,128L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"
            />
          </path>
        </svg>
      </div>
      
      <div className="container mx-auto px-4">
        <motion.div 
          className="max-w-3xl mx-auto bg-gradient-to-br from-slate-800 to-slate-900 rounded-2xl p-8 border border-gold/20 relative overflow-hidden"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          viewport={{ once: true }}
        >
          {/* Glow effect */}
          <div className="absolute -top-20 -right-20 w-40 h-40 bg-gold/20 rounded-full blur-3xl animate-pulse" />
          
          <div className="relative z-10">
            <div className="inline-block bg-gold/20 text-gold text-sm font-bold px-3 py-1 rounded-full mb-4">
              Limited Time Offer
            </div>
            
            <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">Fall Special: Save 15% on Kitchen Renovations</h2>
            
            <p className="text-slate-300 mb-6">Book your kitchen renovation before the countdown ends and receive a 15% discount plus a free appliance upgrade package worth $2,500.</p>
            
            <div className="mb-8">
              <div className="text-sm text-slate-400 mb-2">Offer Expires In:</div>
              <CountdownTimer targetDate={targetDate} />
            </div>
            
            <div className="flex flex-col sm:flex-row items-center gap-4">
              <motion.button 
                className="w-full sm:w-auto px-8 py-3 bg-gold hover:bg-gold/90 text-slate-900 font-bold rounded-lg transition-colors"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                Claim Your 15% Discount
              </motion.button>
              
              <div className="text-sm text-slate-400">
                <span className="text-gold font-bold">Only 5 slots remaining</span> at this special rate
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
};
```

# Test Strategy:
1. Test countdown timer functionality and updates
2. Verify responsive layout on various screen sizes
3. Test animations and visual effects
4. Validate that urgency messaging is clear and compelling
5. Test accessibility of all interactive elements
6. Verify that wave background animations render correctly
7. Test performance with all animations enabled
8. Validate that the CTA buttons work correctly

# Subtasks:
## 1. Create the countdown timer component with animated transitions [pending]
### Dependencies: None
### Description: Develop a real-time countdown timer that updates smoothly with animated transitions between time changes
### Details:
Implement a countdown timer component that displays days, hours, minutes, and seconds remaining. Add smooth transition animations when digits change. Ensure the timer updates in real-time without performance issues. Include proper time formatting and handle edge cases like expiration.

## 2. Build the GlowCard component with pulsing effects and wave background [pending]
### Dependencies: 9.1
### Description: Create a visually appealing card component with glow effects, pulsing animations, and a dynamic wave background
### Details:
Design and implement the GlowCard component that wraps the countdown timer. Add pulsing glow effects that draw attention to the urgency. Create a wave animation for the background that reinforces the scarcity concept. Ensure animations are performant and don't cause layout shifts.

## 3. Implement responsive layout and ensure accessibility of time-sensitive information [pending]
### Dependencies: 9.1, 9.2
### Description: Make the urgency/scarcity section fully responsive across devices and accessible to all users including those with disabilities
### Details:
Adapt the layout to work across different screen sizes. Ensure proper contrast ratios for text visibility. Add appropriate ARIA attributes for screen readers. Implement keyboard navigation. Include non-visual indicators of urgency for users with visual impairments. Test with various assistive technologies.

