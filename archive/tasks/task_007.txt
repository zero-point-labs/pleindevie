# Task ID: 7
# Title: Build Portfolio Gallery with Filtering
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Create a masonry grid layout to showcase recent projects with category filtering and lightbox viewing functionality.
# Details:
1. Create MasonryGrid component using Aceternity UI
2. Implement FilterTabs for category filtering
3. Add ImageModal for detailed project viewing
4. Create responsive layout for all viewport sizes
5. Implement lazy loading for gallery images
6. Add hover effects and animations
7. Create data structure for projects based on the provided data model

Example implementation:
```tsx
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Image from 'next/image';

interface PortfolioGalleryProps {
  projects: Project[];
}

const PortfolioGallery = ({ projects }: PortfolioGalleryProps) => {
  const [selectedCategory, setSelectedCategory] = useState<string>('All');
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  
  // Get unique categories
  const categories = ['All', ...new Set(projects.map(project => project.category))];
  
  // Filter projects by selected category
  const filteredProjects = selectedCategory === 'All' 
    ? projects 
    : projects.filter(project => project.category === selectedCategory);
  
  return (
    <div className="container mx-auto px-4">
      {/* Filter tabs */}
      <div className="flex flex-wrap justify-center gap-2 mb-8">
        {categories.map(category => (
          <button
            key={category}
            onClick={() => setSelectedCategory(category)}
            className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${selectedCategory === category ? 'bg-gold text-slate-900' : 'bg-slate-800 text-slate-300 hover:bg-slate-700'}`}
          >
            {category}
          </button>
        ))}
      </div>
      
      {/* Masonry grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <AnimatePresence>
          {filteredProjects.map(project => (
            <motion.div
              key={project.id}
              layout
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              transition={{ duration: 0.3 }}
              className="relative group cursor-pointer"
              onClick={() => setSelectedProject(project)}
              style={{ gridRow: `span ${Math.ceil(Math.random() * 2) + 1}` }}
            >
              <div className="relative aspect-[4/3] rounded-lg overflow-hidden">
                <Image 
                  src={project.gallery[0]} 
                  alt={project.title} 
                  fill 
                  className="object-cover transition-transform duration-500 group-hover:scale-110"
                />
                
                <div className="absolute inset-0 bg-gradient-to-t from-slate-900/90 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                
                <div className="absolute bottom-0 left-0 right-0 p-4 translate-y-4 opacity-0 group-hover:translate-y-0 group-hover:opacity-100 transition-all duration-300">
                  <h3 className="text-lg font-bold text-white mb-1">{project.title}</h3>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gold">{project.category}</span>
                    <div className="flex items-center text-xs text-slate-300">
                      <span className="mr-3">{project.duration} days</span>
                      <span>${project.budget.toLocaleString()}</span>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>
      
      {/* Lightbox modal */}
      <AnimatePresence>
        {selectedProject && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-slate-900/95"
            onClick={() => setSelectedProject(null)}
          >
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="relative max-w-4xl w-full bg-slate-800 rounded-xl overflow-hidden"
              onClick={e => e.stopPropagation()}
            >
              <button 
                className="absolute top-4 right-4 z-10 w-8 h-8 flex items-center justify-center rounded-full bg-slate-900/50 text-white hover:bg-slate-900 transition-colors"
                onClick={() => setSelectedProject(null)}
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                </svg>
              </button>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-6">
                <div className="space-y-4">
                  <div className="relative aspect-[4/3] rounded-lg overflow-hidden">
                    <Image 
                      src={selectedProject.gallery[0]} 
                      alt={selectedProject.title} 
                      fill 
                      className="object-cover"
                    />
                  </div>
                  
                  <div className="grid grid-cols-3 gap-2">
                    {selectedProject.gallery.slice(1, 4).map((image, index) => (
                      <div key={index} className="relative aspect-square rounded-md overflow-hidden">
                        <Image 
                          src={image} 
                          alt={`${selectedProject.title} - ${index + 1}`} 
                          fill 
                          className="object-cover"
                        />
                      </div>
                    ))}
                  </div>
                </div>
                
                <div>
                  <h2 className="text-2xl font-bold text-white mb-2">{selectedProject.title}</h2>
                  <div className="flex items-center mb-4">
                    <span className="text-sm bg-gold/20 text-gold px-2 py-1 rounded">{selectedProject.category}</span>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 mb-6">
                    <div className="bg-slate-700/50 rounded-lg p-4">
                      <div className="text-sm text-slate-400 mb-1">Duration</div>
                      <div className="text-xl font-bold text-white">{selectedProject.duration} days</div>
                    </div>
                    <div className="bg-slate-700/50 rounded-lg p-4">
                      <div className="text-sm text-slate-400 mb-1">Budget</div>
                      <div className="text-xl font-bold text-white">${selectedProject.budget.toLocaleString()}</div>
                    </div>
                  </div>
                  
                  <div className="mb-6">
                    <h3 className="text-lg font-bold text-white mb-2">Before & After</h3>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="relative aspect-[4/3] rounded-md overflow-hidden">
                        <Image 
                          src={selectedProject.beforeImage} 
                          alt="Before" 
                          fill 
                          className="object-cover"
                        />
                        <div className="absolute bottom-2 left-2 bg-slate-900/80 text-white text-xs px-2 py-1 rounded">Before</div>
                      </div>
                      <div className="relative aspect-[4/3] rounded-md overflow-hidden">
                        <Image 
                          src={selectedProject.afterImage} 
                          alt="After" 
                          fill 
                          className="object-cover"
                        />
                        <div className="absolute bottom-2 left-2 bg-gold/80 text-slate-900 text-xs px-2 py-1 rounded">After</div>
                      </div>
                    </div>
                  </div>
                  
                  <button className="w-full py-3 bg-gold hover:bg-gold/90 text-slate-900 font-bold rounded-lg transition-colors">
                    Get a Similar Transformation
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};
```

# Test Strategy:
1. Test filtering functionality with different categories
2. Verify masonry grid layout on various screen sizes
3. Test lightbox modal opening and closing
4. Validate image loading and optimization
5. Test keyboard navigation and accessibility
6. Verify that animations work correctly
7. Test performance with a large number of projects
8. Validate that before/after images display correctly in the lightbox

# Subtasks:
## 1. Create masonry grid layout [pending]
### Dependencies: None
### Description: Implement a responsive masonry grid layout for the portfolio gallery that adjusts to different screen sizes
### Details:
Use CSS Grid or a library like Masonry.js to create a staggered grid layout. Ensure proper spacing between items. Implement responsive breakpoints for mobile (1 column), tablet (2 columns), and desktop (3+ columns). Test layout with placeholder images of various dimensions. Add smooth transitions when the grid reflows.

## 2. Implement category filtering [pending]
### Dependencies: 7.1
### Description: Create a filtering system with animated transitions when users select different project categories
### Details:
Build category filter buttons/tabs at the top of the gallery. Add data attributes to gallery items for category identification. Implement JavaScript to show/hide items based on selected category. Create smooth animations for items entering/exiting the view (fade/scale effects). Ensure the masonry grid properly reflows after filtering. Add 'All' category option to show everything.

## 3. Build lightbox modal [pending]
### Dependencies: 7.1
### Description: Create a lightbox modal for detailed project viewing with navigation controls
### Details:
Implement a modal that appears when gallery items are clicked. Include high-resolution project images, title, description, and relevant details. Add previous/next navigation controls for browsing projects. Implement keyboard navigation (arrow keys, Escape to close). Ensure proper focus management for accessibility. Add smooth open/close animations for the modal.

## 4. Optimize image loading and performance [pending]
### Dependencies: 7.1, 7.2, 7.3
### Description: Implement techniques to improve image loading speed and overall gallery performance
### Details:
Use responsive images with srcset for different screen sizes. Implement lazy loading for images not in the viewport. Add loading animations or placeholders while images load. Compress and optimize all gallery images. Consider using WebP format with fallbacks. Implement image preloading for the lightbox to improve navigation experience. Test and optimize performance on various devices and connection speeds.

