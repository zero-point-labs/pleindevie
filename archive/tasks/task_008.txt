# Task ID: 8
# Title: Create Value Proposition Bento Grid
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Implement an interactive benefit cards layout using a bento grid with statistics and feature lists to reinforce unique selling points and competitive advantages.
# Details:
1. Create BentoGrid component using Aceternity UI
2. Implement NumberTicker components for statistics
3. Add animated feature reveals
4. Create responsive layout for all viewport sizes
5. Add hover effects and interactions
6. Include key benefits and unique selling points
7. Add visual elements and icons

Example implementation:
```tsx
import { motion } from 'framer-motion';
import { useInView } from 'framer-motion';
import { useRef } from 'react';

interface BenefitCardProps {
  title: string;
  description: string;
  icon: string;
  stat?: {
    value: number;
    label: string;
    prefix?: string;
    suffix?: string;
  };
  features?: string[];
  className?: string;
}

const NumberTicker = ({ value, prefix = '', suffix = '' }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, margin: '-100px' });
  const [displayValue, setDisplayValue] = useState(0);
  
  useEffect(() => {
    if (isInView) {
      let startValue = 0;
      const duration = 2000; // 2 seconds
      const increment = value / (duration / 16); // 60fps
      
      const timer = setInterval(() => {
        startValue += increment;
        if (startValue >= value) {
          setDisplayValue(value);
          clearInterval(timer);
        } else {
          setDisplayValue(Math.floor(startValue));
        }
      }, 16);
      
      return () => clearInterval(timer);
    }
  }, [isInView, value]);
  
  return (
    <div ref={ref} className="text-3xl font-bold text-gold">
      {prefix}{displayValue.toLocaleString()}{suffix}
    </div>
  );
};

const BenefitCard = ({ title, description, icon, stat, features, className }: BenefitCardProps) => {
  return (
    <motion.div 
      className={`bg-slate-800/50 backdrop-blur-sm border border-slate-700/50 rounded-xl p-6 ${className}`}
      whileHover={{ y: -5, boxShadow: '0 10px 30px -10px rgba(212, 175, 55, 0.2)' }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex items-center mb-4">
        <div className="w-10 h-10 flex items-center justify-center bg-gold/20 rounded-full mr-3">
          <img src={icon} alt="" className="w-5 h-5" />
        </div>
        <h3 className="text-xl font-bold text-white">{title}</h3>
      </div>
      
      <p className="text-slate-300 mb-4">{description}</p>
      
      {stat && (
        <div className="mb-4">
          <NumberTicker 
            value={stat.value} 
            prefix={stat.prefix} 
            suffix={stat.suffix} 
          />
          <div className="text-sm text-slate-400">{stat.label}</div>
        </div>
      )}
      
      {features && features.length > 0 && (
        <ul className="space-y-2">
          {features.map((feature, index) => (
            <motion.li 
              key={index} 
              className="flex items-start text-sm text-slate-300"
              initial={{ opacity: 0, x: -10 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3, delay: index * 0.1 }}
              viewport={{ once: true }}
            >
              <svg className="w-4 h-4 text-gold mr-2 mt-0.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M5 13L9 17L19 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
              </svg>
              {feature}
            </motion.li>
          ))}
        </ul>
      )}
    </motion.div>
  );
};

const ValuePropositionBento = () => {
  const benefits: BenefitCardProps[] = [
    {
      title: 'Premium Craftsmanship',
      description: 'Our master craftsmen bring 20+ years of experience to every project.',
      icon: '/icons/craftsmanship.svg',
      stat: {
        value: 98,
        label: 'Quality satisfaction rating',
        suffix: '%'
      },
      features: [
        'Hand-selected materials',
        'Precision installation',
        'Meticulous attention to detail'
      ]
    },
    {
      title: '30-Day Transformation',
      description: 'We complete most renovations in just 30 days without sacrificing quality.',
      icon: '/icons/clock.svg',
      stat: {
        value: 30,
        label: 'Average project completion time',
        suffix: ' days'
      },
      features: [
        'Efficient project management',
        'Parallel work scheduling',
        'Full-time dedicated crews'
      ]
    },
    {
      title: 'Transparent Pricing',
      description: 'No hidden fees or surprise costs. We provide detailed, itemized quotes.',
      icon: '/icons/pricing.svg',
      features: [
        'Detailed line-item quotes',
        'No hidden fees or markups',
        'Price-lock guarantee'
      ]
    },
    {
      title: '5-Year Warranty',
      description: 'Every renovation includes our industry-leading 5-year craftsmanship warranty.',
      icon: '/icons/warranty.svg',
      stat: {
        value: 5,
        label: 'Year warranty on all work',
        prefix: ''
      },
      features: [
        'Comprehensive coverage',
        'Quick response guarantee',
        'Transferable to new homeowners'
      ]
    },
    {
      title: 'Design Expertise',
      description: 'Our award-winning designers create spaces that are both beautiful and functional.',
      icon: '/icons/design.svg',
      stat: {
        value: 15,
        label: 'Design awards won',
        prefix: ''
      }
    },
    {
      title: 'Stress-Free Process',
      description: 'Our project managers handle every detail so you don't have to worry.',
      icon: '/icons/process.svg',
      features: [
        'Daily progress updates',
        'Dedicated project manager',
        'Clean job site guarantee'
      ]
    }
  ];
  
  return (
    <div className="container mx-auto px-4">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <BenefitCard {...benefits[0]} className="md:col-span-2" />
        <BenefitCard {...benefits[1]} />
        <BenefitCard {...benefits[2]} />
        <BenefitCard {...benefits[3]} className="md:col-span-2" />
        <BenefitCard {...benefits[4]} className="md:col-span-1 lg:col-span-2" />
        <BenefitCard {...benefits[5]} />
      </div>
    </div>
  );
};
```

# Test Strategy:
1. Test NumberTicker animation for statistics
2. Verify responsive bento grid layout on various screen sizes
3. Test hover animations and interactions
4. Validate that features animate in correctly
5. Test accessibility of all interactive elements
6. Verify that icons and visual elements load correctly
7. Test performance with all animations enabled
8. Validate that the grid maintains visual hierarchy on different devices

# Subtasks:
## 1. Create responsive bento grid layout [pending]
### Dependencies: None
### Description: Design and implement the bento grid layout with proper responsive adjustments for different screen sizes
### Details:
Create a flexible grid system that maintains visual hierarchy across desktop, tablet, and mobile views. Use CSS Grid or Flexbox for layout. Ensure proper spacing and alignment of elements. Test on multiple screen sizes to verify responsiveness.

## 2. Implement NumberTicker component [pending]
### Dependencies: 8.1
### Description: Develop the NumberTicker component that animates statistics with smooth transitions
### Details:
Create a reusable component that animates number changes. Implement smooth counting animations with configurable speed and formatting options. Add intersection observer to trigger animations when the component enters the viewport. Ensure performance optimization to prevent layout thrashing.

## 3. Build benefit cards with animated reveals [pending]
### Dependencies: 8.1
### Description: Create feature list cards with animations that trigger as users scroll through the page
### Details:
Design and implement benefit cards with feature lists. Add scroll-triggered animations that reveal cards at appropriate times. Implement staggered animations for list items within each card. Ensure animations are subtle and enhance rather than distract from the content. Test animations for performance impact.

