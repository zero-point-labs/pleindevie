# Task ID: 2
# Title: Implement Hero Section with Dynamic Visuals
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create a high-impact hero section with animated backgrounds, before/after image sliders, and compelling value propositions that capture attention within 3 seconds.
# Details:
1. Create Hero component with CSS Grid layout
2. Implement Magic UI gradient backgrounds with animation
3. Develop CompareSlider component using Aceternity UI for before/after showcases
4. Add Framer Motion staggered animations for text and CTA elements
5. Implement responsive design for all viewport sizes
6. Create headline with main value proposition: "Transform Your Space, Elevate Your Life"
7. Add subheading highlighting 30-day transformations
8. Implement CTA button with hover effects
9. Optimize images using Next.js Image component with lazy loading

Example CompareSlider implementation:
```tsx
import { motion } from 'framer-motion';
import Image from 'next/image';
import { useState, useRef, useEffect } from 'react';

const CompareSlider = ({ beforeImage, afterImage }) => {
  const [sliderPosition, setSliderPosition] = useState(50);
  const sliderRef = useRef(null);

  // Handle slider drag logic
  const handleMouseMove = (e) => {
    if (sliderRef.current) {
      const rect = sliderRef.current.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const position = (x / rect.width) * 100;
      setSliderPosition(Math.min(Math.max(position, 0), 100));
    }
  };

  return (
    <div 
      className="relative w-full h-[500px] overflow-hidden rounded-lg"
      ref={sliderRef}
      onMouseMove={handleMouseMove}
      onTouchMove={(e) => handleMouseMove(e.touches[0])}
    >
      <div className="absolute inset-0 w-full h-full">
        <Image 
          src={afterImage} 
          alt="After renovation" 
          fill 
          className="object-cover"
        />
      </div>
      <div 
        className="absolute inset-0 h-full overflow-hidden" 
        style={{ width: `${sliderPosition}%` }}
      >
        <Image 
          src={beforeImage} 
          alt="Before renovation" 
          fill 
          className="object-cover"
        />
      </div>
      <div 
        className="absolute top-0 bottom-0 w-1 bg-white cursor-ew-resize"
        style={{ left: `${sliderPosition}%` }}
      >
        <div className="absolute top-1/2 -translate-y-1/2 -translate-x-1/2 w-8 h-8 bg-white rounded-full flex items-center justify-center">
          <svg width="20" height="20" viewBox="0 0 24 24">
            <path d="M8 5v14l-5-5m13-9v14l5-5" fill="none" stroke="#1A2B4C" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
          </svg>
        </div>
      </div>
    </div>
  );
};
```

# Test Strategy:
1. Test hero section rendering across different devices and screen sizes
2. Verify animations trigger correctly on page load
3. Test before/after slider functionality with mouse and touch interactions
4. Measure load time to ensure it meets performance targets (<1.5s FCP)
5. Verify image optimization is working correctly
6. Test accessibility of all interactive elements
7. Validate that value proposition is clearly visible within 3 seconds

# Subtasks:
## 1. Create the base Hero component with responsive layout [done]
### Dependencies: None
### Description: Develop the foundational Hero component structure with responsive grid/flex layout that adapts to different screen sizes
### Details:
Implement the component skeleton with proper HTML semantics. Create responsive layouts using CSS Grid/Flexbox that work across mobile, tablet, and desktop breakpoints. Set up the container for the before/after slider and text elements. Ensure proper spacing and alignment that adjusts based on viewport size.

## 2. Implement the before/after image comparison slider [done]
### Dependencies: 2.1
### Description: Build an interactive before/after image comparison slider with touch and mouse event handling
### Details:
Create the slider mechanism that reveals the 'after' image as the user drags. Implement mouse events (mousedown, mousemove, mouseup) and touch events (touchstart, touchmove, touchend) for cross-device compatibility. Add visual indicators and proper constraints to the slider movement. Ensure smooth performance during interaction.

## 3. Add animated text elements and CTA using Framer Motion [done]
### Dependencies: 2.1
### Description: Implement engaging text animations and call-to-action button using Framer Motion
### Details:
Set up Framer Motion animations for text elements with staggered entrance effects. Create attention-grabbing animations for the CTA button. Implement scroll-triggered animations where appropriate. Ensure animations enhance rather than distract from the user experience. Add hover/focus states for interactive elements.

## 4. Optimize performance and accessibility of all interactive elements [done]
### Dependencies: 2.2, 2.3
### Description: Ensure the Hero section meets performance benchmarks and accessibility standards
### Details:
Implement proper ARIA attributes for all interactive elements. Ensure keyboard navigation works for the slider and CTA. Optimize image loading with proper sizing, formats (WebP/AVIF), and loading strategies. Add appropriate focus states and screen reader support. Test and optimize animation performance to avoid layout shifts and maintain 60fps.

