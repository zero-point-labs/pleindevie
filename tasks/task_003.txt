# Task ID: 3
# Title: Develop Lead Capture Form System
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create an optimized lead capture form with benefit reinforcement, instant gratification, and validation to convert visitors into qualified leads.
# Details:
1. Create Form component using React Hook Form with Zod validation
2. Implement split layout design with form fields on one side and benefits on the other
3. Add mesh gradient backgrounds for visual appeal
4. Create form fields for name, email, phone, project type, and budget
5. Implement real-time validation with error messages
6. Add progress indicator for multi-step form (if applicable)
7. Create success state with confirmation message
8. Implement form submission to API endpoint
9. Add privacy policy and terms acceptance checkbox

Example form implementation:
```tsx
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select } from '@/components/ui/select';

const formSchema = z.object({
  name: z.string().min(2, { message: 'Name is required' }),
  email: z.string().email({ message: 'Valid email is required' }),
  phone: z.string().min(10, { message: 'Valid phone number is required' }),
  projectType: z.enum(['Kitchen', 'Bathroom', 'Whole Home', 'Other']),
  budget: z.enum(['$25k-$50k', '$50k-$100k', '$100k+', 'Not Sure']),
  message: z.string().optional(),
  termsAccepted: z.boolean().refine(val => val === true, {
    message: 'You must accept the terms and conditions'
  })
});

const LeadCaptureForm = () => {
  const { register, handleSubmit, formState: { errors, isSubmitting } } = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      email: '',
      phone: '',
      projectType: 'Kitchen',
      budget: 'Not Sure',
      message: '',
      termsAccepted: false
    }
  });

  const onSubmit = async (data) => {
    try {
      // Submit form data to API
      const response = await fetch('/api/leads', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      
      if (!response.ok) throw new Error('Form submission failed');
      
      // Handle success
      // Show success message or redirect
    } catch (error) {
      // Handle error
      console.error('Form submission error:', error);
    }
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 p-6 rounded-lg bg-gradient-to-br from-slate-900 to-slate-800">
      <div className="space-y-4">
        <h3 className="text-2xl font-bold text-white">Get Your Free Consultation</h3>
        <p className="text-slate-300">Transform your home with our award-winning design team</p>
        
        {/* Benefits list */}
        <ul className="space-y-2 text-slate-300">
          <li className="flex items-center"><CheckIcon className="mr-2 text-gold" /> 30-day transformation guarantee</li>
          <li className="flex items-center"><CheckIcon className="mr-2 text-gold" /> Transparent pricing - no surprises</li>
          <li className="flex items-center"><CheckIcon className="mr-2 text-gold" /> 5-year craftsmanship warranty</li>
        </ul>
      </div>
      
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <div>
          <Input
            placeholder="Your Name"
            {...register('name')}
            className={errors.name ? 'border-red-500' : ''}
          />
          {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>}
        </div>
        
        {/* Add remaining form fields */}
        
        <div className="flex items-center space-x-2">
          <input
            type="checkbox"
            id="terms"
            {...register('termsAccepted')}
            className="rounded border-gray-300"
          />
          <label htmlFor="terms" className="text-sm text-slate-300">
            I accept the <a href="/terms" className="text-gold hover:underline">terms and conditions</a>
          </label>
        </div>
        {errors.termsAccepted && <p className="text-red-500 text-sm">{errors.termsAccepted.message}</p>}
        
        <Button type="submit" disabled={isSubmitting} className="w-full bg-gold hover:bg-gold/90 text-slate-900 font-bold">
          {isSubmitting ? 'Submitting...' : 'Get My Free Consultation'}
        </Button>
      </form>
    </div>
  );
};
```

# Test Strategy:
1. Test form validation for all fields with valid and invalid inputs
2. Verify form submission process and API integration
3. Test form responsiveness across different devices
4. Validate error handling and user feedback
5. Test form accessibility with keyboard navigation and screen readers
6. Measure form completion time and identify potential friction points
7. A/B test different form layouts and CTA text
8. Verify that form data is correctly stored in the database

# Subtasks:
## 1. Create form schema and validation with Zod [pending]
### Dependencies: None
### Description: Define the lead capture form schema using Zod for type-safe validation
### Details:
Create a comprehensive Zod schema that defines all form fields (name, email, phone, company, etc.), implements validation rules (required fields, email format, phone number format), and provides meaningful error messages. Include type definitions that can be exported for use throughout the application.

## 2. Build the form UI with responsive layout [pending]
### Dependencies: 3.1
### Description: Develop the form interface with responsive design and visual enhancements
### Details:
Create form components with proper HTML semantics, implement responsive layout that works across devices, add visual enhancements (input focus states, loading indicators), ensure accessibility compliance (ARIA attributes, keyboard navigation), and implement progressive disclosure for complex form sections.

## 3. Implement form state management and error handling [pending]
### Dependencies: 3.1, 3.2
### Description: Set up state management for form data and implement comprehensive error handling
### Details:
Implement form state management using React Hook Form or similar library, integrate Zod schema for validation, add real-time field validation with immediate feedback, handle form submission states (idle, submitting, success, error), and implement field-level error messages with clear user guidance.

## 4. Create form submission and API integration [pending]
### Dependencies: 3.3
### Description: Develop the submission logic and integrate with backend API endpoints
### Details:
Create API service for form submission, implement proper error handling for network issues, add retry logic for failed submissions, store partial form data for recovery, implement success/failure notifications, and ensure CSRF protection and security measures.

## 5. Add analytics tracking and conversion optimization [pending]
### Dependencies: 3.4
### Description: Implement analytics tracking and features to optimize form conversion rates
### Details:
Add event tracking for form interactions (field focus, abandonment, completion), implement A/B testing capability for form variants, add form completion progress indicator, set up conversion funnel tracking, and implement smart defaults and suggestions to improve completion rates.

