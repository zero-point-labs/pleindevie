# Task ID: 4
# Title: Create Social Proof Carousel System
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Implement a rotating carousel of customer testimonials with project visuals and ratings to build credibility and increase conversion rates.
# Details:
1. Create Testimonial component using Embla Carousel
2. Implement auto-scroll functionality with manual navigation controls
3. Design shadcn/ui cards with glassmorphism effects
4. Add star rating system
5. Include before/after project visuals with each testimonial
6. Implement responsive design for all viewport sizes
7. Add pagination indicators
8. Create data structure for testimonials based on the provided data model

Example implementation:
```tsx
import useEmblaCarousel from 'embla-carousel-react';
import { useCallback, useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { StarIcon } from 'lucide-react';

interface TestimonialProps {
  testimonials: Testimonial[];
}

const TestimonialCarousel = ({ testimonials }: TestimonialProps) => {
  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true, align: 'start' });
  const [selectedIndex, setSelectedIndex] = useState(0);

  const scrollTo = useCallback(
    (index: number) => emblaApi && emblaApi.scrollTo(index),
    [emblaApi]
  );

  const onSelect = useCallback(() => {
    if (!emblaApi) return;
    setSelectedIndex(emblaApi.selectedScrollSnap());
  }, [emblaApi]);

  useEffect(() => {
    if (!emblaApi) return;
    onSelect();
    emblaApi.on('select', onSelect);
    
    // Auto-scroll every 5 seconds
    const autoplay = setInterval(() => {
      if (emblaApi.canScrollNext()) {
        emblaApi.scrollNext();
      } else {
        emblaApi.scrollTo(0);
      }
    }, 5000);
    
    return () => {
      emblaApi.off('select', onSelect);
      clearInterval(autoplay);
    };
  }, [emblaApi, onSelect]);

  return (
    <div className="relative">
      <div className="overflow-hidden" ref={emblaRef}>
        <div className="flex">
          {testimonials.map((testimonial, index) => (
            <div className="flex-[0_0_100%] min-w-0 pl-4 md:flex-[0_0_50%] lg:flex-[0_0_33.33%]" key={testimonial.id}>
              <Card className="h-full backdrop-blur-sm bg-white/10 border-gold/20 overflow-hidden">
                <CardContent className="p-6">
                  <div className="flex items-center mb-4">
                    <div className="w-12 h-12 rounded-full overflow-hidden mr-4">
                      <Image 
                        src={testimonial.avatar} 
                        alt={testimonial.name} 
                        width={48} 
                        height={48} 
                        className="object-cover"
                      />
                    </div>
                    <div>
                      <h4 className="font-bold text-white">{testimonial.name}</h4>
                      <p className="text-sm text-slate-300">{testimonial.location}</p>
                    </div>
                  </div>
                  
                  <div className="flex mb-3">
                    {[...Array(5)].map((_, i) => (
                      <StarIcon 
                        key={i} 
                        className={`w-5 h-5 ${i < testimonial.rating ? 'text-gold' : 'text-slate-600'}`} 
                        fill={i < testimonial.rating ? 'currentColor' : 'none'}
                      />
                    ))}
                  </div>
                  
                  <p className="text-slate-300 mb-4">"{testimonial.content}"</p>
                  
                  <div className="relative h-40 rounded-md overflow-hidden">
                    <div className="absolute inset-0 grid grid-cols-2 gap-1">
                      <div className="relative">
                        <Image 
                          src={testimonial.beforeImage} 
                          alt="Before" 
                          fill 
                          className="object-cover"
                        />
                        <div className="absolute bottom-2 left-2 bg-slate-900/80 text-white text-xs px-2 py-1 rounded">Before</div>
                      </div>
                      <div className="relative">
                        <Image 
                          src={testimonial.afterImage} 
                          alt="After" 
                          fill 
                          className="object-cover"
                        />
                        <div className="absolute bottom-2 left-2 bg-gold/80 text-slate-900 text-xs px-2 py-1 rounded">After</div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-3 text-sm text-slate-400">{testimonial.projectType}</div>
                </CardContent>
              </Card>
            </div>
          ))}
        </div>
      </div>
      
      <div className="flex justify-center mt-4 gap-2">
        {testimonials.map((_, index) => (
          <button
            key={index}
            className={`w-3 h-3 rounded-full ${index === selectedIndex ? 'bg-gold' : 'bg-slate-600'}`}
            onClick={() => scrollTo(index)}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
};
```

# Test Strategy:
1. Test carousel functionality including auto-scroll and manual navigation
2. Verify responsive behavior across different screen sizes
3. Test touch interactions on mobile devices
4. Validate that testimonial data is correctly displayed
5. Test accessibility of carousel controls
6. Verify that star ratings render correctly
7. Test performance with a large number of testimonials
8. Validate that before/after images load correctly

# Subtasks:
## 1. Build base carousel component with Embla Carousel [pending]
### Dependencies: None
### Description: Implement the foundation of the social proof carousel using Embla Carousel library with navigation controls
### Details:
Install Embla Carousel package, create the basic carousel structure, implement previous/next navigation buttons, ensure the carousel container adapts to different screen sizes, and set up the initial carousel configuration options

## 2. Create testimonial card design with responsive layout [pending]
### Dependencies: 4.1
### Description: Design and implement the testimonial cards that will be displayed within the carousel
### Details:
Create the testimonial card component with proper spacing and typography, implement the star rating system, ensure the cards display properly on all screen sizes, add proper styling for customer avatar, name, and testimonial text

## 3. Implement auto-scroll and accessibility features [pending]
### Dependencies: 4.1, 4.2
### Description: Add auto-scrolling functionality and ensure the carousel is fully accessible
### Details:
Configure auto-scroll timing and behavior, implement touch/swipe interactions for mobile devices, add keyboard navigation support, ensure proper ARIA attributes for screen readers, add focus management for interactive elements, and implement pause-on-hover functionality

