# Task ID: 6
# Title: Develop Process Timeline Visualization
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Create an animated timeline that explains the 4-step renovation process with progress indicators to reduce anxiety and set clear expectations.
# Details:
1. Create Timeline component using Aceternity Timeline
2. Implement particle background effects
3. Add step-by-step animations triggered on scroll
4. Create progress indicators for each step
5. Add detailed descriptions for each phase of the renovation process
6. Implement responsive design for all viewport sizes
7. Add icons or illustrations for each step

Example implementation:
```tsx
import { motion, useScroll, useTransform } from 'framer-motion';
import { useRef } from 'react';

interface TimelineStep {
  title: string;
  description: string;
  icon: string;
}

const steps: TimelineStep[] = [
  {
    title: 'Consultation & Design',
    description: 'We'll discuss your vision, budget, and timeline. Our designers create custom plans tailored to your needs.',
    icon: '/icons/design.svg'
  },
  {
    title: 'Planning & Preparation',
    description: 'We finalize materials, secure permits, and create a detailed project schedule to ensure smooth execution.',
    icon: '/icons/planning.svg'
  },
  {
    title: 'Construction & Installation',
    description: 'Our skilled craftsmen transform your space with precision and care, with daily progress updates.',
    icon: '/icons/construction.svg'
  },
  {
    title: 'Final Walkthrough & Warranty',
    description: 'We complete a detailed inspection together and provide our 5-year craftsmanship warranty for peace of mind.',
    icon: '/icons/warranty.svg'
  }
];

const ProcessTimeline = () => {
  const containerRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ['start end', 'end start']
  });
  
  return (
    <div ref={containerRef} className="relative py-20">
      {/* Particle background */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute inset-0 bg-slate-900/50" />
        <div className="h-full w-full">
          {/* Add particle animation here */}
        </div>
      </div>
      
      <div className="container mx-auto px-4">
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">Our 30-Day Transformation Process</h2>
          <p className="text-slate-300 max-w-2xl mx-auto">We've refined our renovation process to deliver exceptional results in just 30 days, without sacrificing quality or attention to detail.</p>
        </motion.div>
        
        <div className="relative">
          {/* Timeline line */}
          <div className="absolute left-1/2 top-0 bottom-0 w-1 bg-gradient-to-b from-gold/20 via-gold to-gold/20 transform -translate-x-1/2" />
          
          {steps.map((step, index) => {
            const isEven = index % 2 === 0;
            
            return (
              <motion.div 
                key={index}
                className={`flex items-center mb-16 last:mb-0 ${isEven ? 'flex-row' : 'flex-row-reverse'}`}
                initial={{ opacity: 0, x: isEven ? -50 : 50 }}
                whileInView={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                viewport={{ once: true, margin: '-100px' }}
              >
                <div className={`w-1/2 pr-8 ${!isEven && 'text-right'}`}>
                  <h3 className="text-xl font-bold text-white mb-2">{step.title}</h3>
                  <p className="text-slate-300">{step.description}</p>
                </div>
                
                <div className="relative z-10">
                  <motion.div 
                    className="w-12 h-12 rounded-full bg-gold flex items-center justify-center text-slate-900 font-bold"
                    initial={{ scale: 0.8 }}
                    whileInView={{ scale: 1 }}
                    transition={{ 
                      type: 'spring', 
                      stiffness: 300, 
                      damping: 15,
                      delay: index * 0.2
                    }}
                    viewport={{ once: true }}
                  >
                    {index + 1}
                  </motion.div>
                </div>
                
                <div className="w-1/2 pl-8">
                  {isEven ? null : (
                    <div className="flex items-center">
                      <img src={step.icon} alt="" className="w-10 h-10 mr-4" />
                      <div className="h-1 flex-1 bg-gradient-to-r from-gold to-gold/0" />
                    </div>
                  )}
                </div>
              </motion.div>
            );
          })}
        </div>
      </div>
    </div>
  );
};
```

# Test Strategy:
1. Test scroll-triggered animations across different browsers
2. Verify responsive layout on various screen sizes
3. Test that all timeline steps are correctly displayed
4. Validate that progress indicators work correctly
5. Test accessibility of the timeline component
6. Verify that particle background renders correctly
7. Test performance with animations enabled
8. Validate that the timeline is visually clear and easy to understand

# Subtasks:
## 1. Create timeline component structure with semantic markup [pending]
### Dependencies: None
### Description: Build the foundational timeline component with proper semantic HTML elements to ensure accessibility and SEO optimization.
### Details:
Implement a timeline component using semantic HTML elements like <section>, <article>, and ARIA attributes where appropriate. Create a clear visual hierarchy with timeline steps, ensuring each step has appropriate headings and content structure. Include proper landmark roles and ensure the component has a logical tab order. Set up the basic styling with CSS variables for theming and layout.

## 2. Implement scroll-triggered animations with Framer Motion [pending]
### Dependencies: 6.1
### Description: Add scroll-based animations to timeline steps using Framer Motion, ensuring performance optimization and respecting user motion preferences.
### Details:
Use Framer Motion's useInView hook to detect when timeline elements enter the viewport. Implement staggered animations for timeline steps with appropriate easing and timing. Add a prefers-reduced-motion media query check to disable or simplify animations for users who prefer reduced motion. Optimize performance by using will-change hints and ensuring animations don't cause layout shifts. Implement fallbacks for browsers that don't support the required features.

## 3. Add responsive design and enhance accessibility [pending]
### Dependencies: 6.1, 6.2
### Description: Ensure the timeline component is fully responsive across all viewport sizes and meets accessibility standards for interactive elements.
### Details:
Implement responsive breakpoints to adjust timeline layout for different screen sizes. Create mobile-specific interactions that work well with touch interfaces. Ensure all interactive elements have appropriate focus states and keyboard navigation. Test with screen readers to verify the timeline is properly announced. Add appropriate ARIA live regions for dynamic content changes. Document the component with usage examples and accessibility considerations.

